name: Main Build using Docker

on:
  release:
    types:
      - created
    branches:
      - main
env:
  # solution path doesn't need slashes unless there it is multiple folders deep
  # solution name does not include extension. .sln is assumed
  SOLUTION_PATH: epi-essentials-mobile-control\
  SOLUTION_FILE: epi-essentials-mobile-control
  # Do not edit this, we're just creating it here
  VERSION: 0.0.0-buildtype-buildnumber
  # Defaults to debug for build type
  BUILD_TYPE: Release
  # Defaults to main as the release branch.  Change as necessary
  RELEASE_BRANCH: main
jobs:
  Build_Project:
    runs-on: windows-latest
    steps:
      # First we checkout the source repo
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true
          token: ${{ secrets.PLUGIN_ACTION_TOKEN }}
      # Generate the appropriate version number
      - name: Set Version Number
        shell: powershell
        env:
          TAG_NAME: ${{ github.event.release.tag_name }}
        run: Write-Output "::set-env name=VERSION::$($Env:TAG_NAME)"
      # Use the version number to set the version of the assemblies
      - name: Update AssemblyInfo.cs
        shell: powershell
        run: |
          Write-Output ${{ env.VERSION }}
          ./.github/scripts/UpdateAssemblyVersion.ps1 ${{ env.VERSION }}
      # Login to Docker
      - name: Login to Docker
        uses: azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      # Build the solutions in the docker image
      - name: Build Solution
        shell: powershell
        run: |
          Invoke-Expression "docker run --rm --mount type=bind,source=""$($Env:GITHUB_WORKSPACE)"",target=""c:/project"" pepperdash/sspbuilder c:\cihelpers\vsidebuild.exe -Solution ""c:\project\$($Env:SOLUTION_PATH)\$($Env:SOLUTION_FILE).sln"" -BuildSolutionConfiguration $($ENV:BUILD_TYPE)"
      # Zip up the output files as needed
      - name: Zip Build Output
        shell: powershell
        run: ./.github/scripts/ZipBuildOutput.ps1
      - name: Upload Build Output
        uses: actions/upload-artifact@v1
        with:
          name: Build
          path: ./${{ env.SOLUTION_FILE}}-${{ env.VERSION}}.zip
      # Upload the build package to the release
      - name: Upload Release Package
        id: upload_release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ env.SOLUTION_FILE}}-${{ env.VERSION}}.zip
          asset_name: ${{ env.SOLUTION_FILE}}-${{ env.VERSION}}.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
